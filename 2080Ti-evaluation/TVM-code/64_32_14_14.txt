ConfigSpace (len=21676032, space_map=
   0 tile_f: Split(policy=factors, product=32, num_outputs=4) len=56
   1 tile_y: Split(policy=factors, product=14, num_outputs=4) len=16
   2 tile_x: Split(policy=factors, product=14, num_outputs=4) len=16
   3 tile_rc: Split(policy=factors, product=64, num_outputs=3) len=28
   4 tile_ry: Split(policy=factors, product=3, num_outputs=3) len=3
   5 tile_rx: Split(policy=factors, product=3, num_outputs=3) len=3
   6 auto_unroll_max_step: OtherOption([0, 512, 1500]) len=3
   7 unroll_explicit: OtherOption([0, 1]) len=2
)
Finish loading 150 records

Best config:
[('tile_f', [-1, 1, 8, 1]), ('tile_y', [-1, 1, 7, 1]), ('tile_x', [-1, 1, 2, 1]), ('tile_rc', [-1, 2, 8]), ('tile_ry', [-1, 1, 3]), ('tile_rx', [-1, 1, 1]), ('auto_unroll_max_step', 0), ('unroll_explicit', 0)],None,1079135
Finish loading 150 records
/home/lizhi/tvm-python/tvm/python/tvm/target/target.py:454: UserWarning: tvm.target.create() is being deprecated. Please use tvm.target.Target() instead
  warnings.warn("tvm.target.create() is being deprecated. Please use tvm.target.Target() instead")
Dump


******6*******

extern "C" __global__ void default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute) {
  float compute_local[1];
  __shared__ float pad_temp_shared[448];
  __shared__ float kernel_shared[384];
  float pad_temp_shared_local[24];
  float kernel_shared_local[24];
  compute_local[(0)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 4; ++rc_outer) {
    for (int ry_outer = 0; ry_outer < 3; ++ry_outer) {
      __syncthreads();
      for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 4; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) {
        pad_temp_shared[(((((((int)threadIdx.z) * 56) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 4)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner))] = (((((1 <= (((((int)blockIdx.y) * 7) + ry_outer) + (((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) % 7))) && ((((((int)blockIdx.y) * 7) + ry_outer) + (((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) % 7)) < 15)) && (1 <= ((((int)blockIdx.x) * 2) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner))) && (((((int)blockIdx.x) * 2) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 15)) ? data[((((((((((rc_outer * 3136) + (((int)threadIdx.z) * 392)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) / 7) * 196)) + (((int)blockIdx.y) * 98)) + (ry_outer * 14)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) % 7) * 14)) + (((int)blockIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) - 15))] : 0.000000e+00f);
      }
      for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 < 4; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) {
        if ((((((((int)threadIdx.y) * 7) + (((int)threadIdx.x) * 4)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) / 48) + ((int)threadIdx.z)) < 8) {
          if (((((int)threadIdx.z) * 16) + ((((((int)threadIdx.y) * 7) + (((int)threadIdx.x) * 4)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) / 3)) < 128) {
            if (((((((int)threadIdx.z) * 48) + (((int)threadIdx.y) * 7)) + (((int)threadIdx.x) * 4)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 384) {
              if ((((((int)threadIdx.y) * 7) + (((int)threadIdx.x) * 4)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 48) {
                if (((((int)threadIdx.x) * 4) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 7) {
                  kernel_shared[(((((((int)threadIdx.z) * 48) + (((int)threadIdx.y) * 7)) + (((int)threadIdx.x) * 4)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1))] = kernel[(((((((((int)blockIdx.z) * 4608) + (((int)threadIdx.z) * 576)) + (rc_outer * 144)) + (((((((int)threadIdx.y) * 7) + (((int)threadIdx.x) * 4)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) / 3) * 9)) + (ry_outer * 3)) + ((((((int)threadIdx.y) * 7) + (((int)threadIdx.x) * 4)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) % 3)))];
                }
              }
            }
          }
        }
      }
      __syncthreads();
      for (int rc_inner_outer = 0; rc_inner_outer < 2; ++rc_inner_outer) {
        for (int ax1 = 0; ax1 < 8; ++ax1) {
          for (int ax3 = 0; ax3 < 3; ++ax3) {
            pad_temp_shared_local[(((ax1 * 3) + ax3))] = pad_temp_shared[((((((rc_inner_outer * 224) + (ax1 * 28)) + (((int)threadIdx.y) * 4)) + ax3) + ((int)threadIdx.x)))];
          }
        }
        for (int ax11 = 0; ax11 < 8; ++ax11) {
          for (int ax31 = 0; ax31 < 3; ++ax31) {
            kernel_shared_local[(((ax11 * 3) + ax31))] = kernel_shared[(((((((int)threadIdx.z) * 48) + (rc_inner_outer * 24)) + (ax11 * 3)) + ax31))];
          }
        }
        for (int rc_inner_inner = 0; rc_inner_inner < 8; ++rc_inner_inner) {
          for (int rx_inner_inner = 0; rx_inner_inner < 3; ++rx_inner_inner) {
            compute_local[(0)] = (compute_local[(0)] + (pad_temp_shared_local[(((rc_inner_inner * 3) + rx_inner_inner))] * kernel_shared_local[(((rc_inner_inner * 3) + rx_inner_inner))]));
          }
        }
      }
    }
  }
  compute[(((((((((int)blockIdx.z) * 1568) + (((int)threadIdx.z) * 196)) + (((int)blockIdx.y) * 98)) + (((int)threadIdx.y) * 14)) + (((int)blockIdx.x) * 2)) + ((int)threadIdx.x)))] = compute_local[(0)];
}



******6*******

Time cost of this operator: 0.000019
cnm
[src/runtime/cuda/cuda_module.cc] 
 grid=(7,2,4),  block=(2,7,8)
[src/runtime/cuda/cuda_module.cc] 
 grid=(7,2,4),  block=(2,7,8)
[src/runtime/cuda/cuda_module.cc] 
 grid=(7,2,4),  block=(2,7,8)
