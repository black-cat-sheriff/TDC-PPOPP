ConfigSpace (len=260112384, space_map=
   0 tile_f: Split(policy=factors, product=96, num_outputs=4) len=224
   1 tile_y: Split(policy=factors, product=14, num_outputs=4) len=16
   2 tile_x: Split(policy=factors, product=14, num_outputs=4) len=16
   3 tile_rc: Split(policy=factors, product=192, num_outputs=3) len=84
   4 tile_ry: Split(policy=factors, product=3, num_outputs=3) len=3
   5 tile_rx: Split(policy=factors, product=3, num_outputs=3) len=3
   6 auto_unroll_max_step: OtherOption([0, 512, 1500]) len=3
   7 unroll_explicit: OtherOption([0, 1]) len=2
)
Finish loading 150 records

Best config:
[('tile_f', [-1, 1, 2, 1]), ('tile_y', [-1, 1, 14, 1]), ('tile_x', [-1, 1, 7, 1]), ('tile_rc', [-1, 24, 2]), ('tile_ry', [-1, 1, 3]), ('tile_rx', [-1, 3, 1]), ('auto_unroll_max_step', 0), ('unroll_explicit', 0)],None,25369356
Finish loading 150 records
/home/lizhi/tvm-python/tvm/python/tvm/target/target.py:454: UserWarning: tvm.target.create() is being deprecated. Please use tvm.target.Target() instead
  warnings.warn("tvm.target.create() is being deprecated. Please use tvm.target.Target() instead")
Dump


******6*******

extern "C" __global__ void default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute) {
  float compute_local[1];
  __shared__ float pad_temp_shared[6912];
  __shared__ float kernel_shared[864];
  float pad_temp_shared_local[6];
  float kernel_shared_local[6];
  compute_local[(0)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 4; ++rc_outer) {
    __syncthreads();
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 36; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) {
      if (((((int)threadIdx.z) * 24) + (((((int)threadIdx.x) * 4) + (((((int)threadIdx.y) * 247) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 9)) >> 4)) < 48) {
        if ((((((int)threadIdx.z) * 384) + (((int)threadIdx.x) * 4)) + (((((int)threadIdx.y) * 247) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 9)) < 768) {
          if (((((((int)threadIdx.z) * 3456) + (((int)threadIdx.y) * 247)) + (((int)threadIdx.x) * 36)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 6912) {
            if ((((((int)threadIdx.y) * 247) + (((int)threadIdx.x) * 36)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 3456) {
              if (((((int)threadIdx.x) * 36) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 247) {
                pad_temp_shared[(((((((int)threadIdx.z) * 3456) + (((int)threadIdx.y) * 247)) + (((int)threadIdx.x) * 36)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner))] = (((((1 <= (((((int)threadIdx.x) * 4) + (((((int)threadIdx.y) * 247) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 9)) & 15)) && ((((((int)threadIdx.x) * 4) + (((((int)threadIdx.y) * 247) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 9)) & 15) < 15)) && (1 <= ((((int)blockIdx.x) * 7) + (((((int)threadIdx.y) * 247) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 9)))) && (((((int)blockIdx.x) * 7) + (((((int)threadIdx.y) * 247) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 9)) < 15)) ? data[((((((((rc_outer * 9408) + (((int)threadIdx.z) * 4704)) + ((((((int)threadIdx.x) * 4) + (((((int)threadIdx.y) * 247) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 9)) >> 4) * 196)) + ((((((int)threadIdx.x) * 4) + (((((int)threadIdx.y) * 247) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 9)) & 15) * 14)) + (((int)blockIdx.x) * 7)) + (((((int)threadIdx.y) * 247) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 9)) - 15))] : 0.000000e+00f);
              }
            }
          }
        }
      }
    }
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 < 5; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) {
      if ((((((((int)threadIdx.y) * 31) + (((int)threadIdx.x) * 5)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) / 432) + ((int)threadIdx.z)) < 2) {
        if (((((int)threadIdx.z) * 48) + ((((((int)threadIdx.y) * 31) + (((int)threadIdx.x) * 5)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) / 9)) < 96) {
          if (((((int)threadIdx.z) * 144) + ((((((int)threadIdx.y) * 31) + (((int)threadIdx.x) * 5)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) / 3)) < 288) {
            if (((((((int)threadIdx.z) * 432) + (((int)threadIdx.y) * 31)) + (((int)threadIdx.x) * 5)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 864) {
              if ((((((int)threadIdx.y) * 31) + (((int)threadIdx.x) * 5)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 432) {
                if (((((int)threadIdx.x) * 5) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 31) {
                  kernel_shared[(((((((int)threadIdx.z) * 432) + (((int)threadIdx.y) * 31)) + (((int)threadIdx.x) * 5)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1))] = kernel[(((((((((int)blockIdx.z) * 3456) + (((int)threadIdx.z) * 1728)) + (rc_outer * 432)) + (((int)threadIdx.y) * 31)) + (((int)threadIdx.x) * 5)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1))];
                }
              }
            }
          }
        }
      }
    }
    __syncthreads();
    for (int rc_inner_outer = 0; rc_inner_outer < 24; ++rc_inner_outer) {
      for (int ry_inner_outer = 0; ry_inner_outer < 3; ++ry_inner_outer) {
        for (int ax1 = 0; ax1 < 2; ++ax1) {
          for (int ax3 = 0; ax3 < 3; ++ax3) {
            pad_temp_shared_local[(((ax1 * 3) + ax3))] = pad_temp_shared[(((((((rc_inner_outer * 288) + (ax1 * 144)) + (((int)threadIdx.y) * 9)) + (ry_inner_outer * 9)) + ax3) + ((int)threadIdx.x)))];
          }
        }
        for (int ax11 = 0; ax11 < 2; ++ax11) {
          for (int ax31 = 0; ax31 < 3; ++ax31) {
            kernel_shared_local[(((ax11 * 3) + ax31))] = kernel_shared[((((((((int)threadIdx.z) * 432) + (rc_inner_outer * 18)) + (ax11 * 9)) + (ry_inner_outer * 3)) + ax31))];
          }
        }
        for (int rc_inner_inner = 0; rc_inner_inner < 2; ++rc_inner_inner) {
          for (int rx_inner_inner = 0; rx_inner_inner < 3; ++rx_inner_inner) {
            compute_local[(0)] = (compute_local[(0)] + (pad_temp_shared_local[(((rc_inner_inner * 3) + rx_inner_inner))] * kernel_shared_local[(((rc_inner_inner * 3) + rx_inner_inner))]));
          }
        }
      }
    }
  }
  compute[((((((((int)blockIdx.z) * 392) + (((int)threadIdx.z) * 196)) + (((int)threadIdx.y) * 14)) + (((int)blockIdx.x) * 7)) + ((int)threadIdx.x)))] = compute_local[(0)];
}



******6*******

Time cost of this operator: 0.000138
cnm
[src/runtime/cuda/cuda_module.cc] 
 grid=(2,1,48),  block=(7,14,2)
[src/runtime/cuda/cuda_module.cc] 
 grid=(2,1,48),  block=(7,14,2)
[src/runtime/cuda/cuda_module.cc] 
 grid=(2,1,48),  block=(7,14,2)
