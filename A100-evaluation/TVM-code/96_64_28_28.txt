ConfigSpace (len=457228800, space_map=
   0 tile_f: Split(policy=factors, product=64, num_outputs=4) len=84
   1 tile_y: Split(policy=factors, product=28, num_outputs=4) len=40
   2 tile_x: Split(policy=factors, product=28, num_outputs=4) len=40
   3 tile_rc: Split(policy=factors, product=96, num_outputs=3) len=63
   4 tile_ry: Split(policy=factors, product=3, num_outputs=3) len=3
   5 tile_rx: Split(policy=factors, product=3, num_outputs=3) len=3
   6 auto_unroll_max_step: OtherOption([0, 512, 1500]) len=3
   7 unroll_explicit: OtherOption([0, 1]) len=2
)
Finish loading 150 records

Best config:
[('tile_f', [-1, 1, 8, 1]), ('tile_y', [-1, 1, 7, 1]), ('tile_x', [-1, 1, 4, 1]), ('tile_rc', [-1, 4, 4]), ('tile_ry', [-1, 1, 1]), ('tile_rx', [-1, 1, 3]), ('auto_unroll_max_step', 0), ('unroll_explicit', 0)],None,55004226
Finish loading 150 records
/uufs/chpc.utah.edu/common/home/u0814474/soft/tvm-python/tvm/python/tvm/target/target.py:454: UserWarning: tvm.target.create() is being deprecated. Please use tvm.target.Target() instead
  warnings.warn("tvm.target.create() is being deprecated. Please use tvm.target.Target() instead")
Dump


******6*******

extern "C" __global__ void default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute) {
  float compute_local[1];
  __shared__ float pad_temp_shared[576];
  __shared__ float kernel_shared[384];
  float pad_temp_shared_local[12];
  float kernel_shared_local[12];
  compute_local[(0)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 6; ++rc_outer) {
    for (int rx_outer = 0; rx_outer < 3; ++rx_outer) {
      __syncthreads();
      for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 3; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) {
        if (((((int)threadIdx.z) * 2) + ((((((int)threadIdx.y) * 11) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 36)) < 16) {
          if (((((int)threadIdx.z) * 18) + ((((((int)threadIdx.y) * 11) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) >> 2)) < 144) {
            if (((((((int)threadIdx.z) * 72) + (((int)threadIdx.y) * 11)) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 576) {
              if ((((((int)threadIdx.y) * 11) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 72) {
                if (((((int)threadIdx.x) * 3) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 11) {
                  pad_temp_shared[(((((((int)threadIdx.z) * 72) + (((int)threadIdx.y) * 11)) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner))] = (((((1 <= ((((int)blockIdx.y) * 7) + (((((((int)threadIdx.y) * 11) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 36) >> 2))) && (((((int)blockIdx.y) * 7) + (((((((int)threadIdx.y) * 11) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 36) >> 2)) < 29)) && (1 <= (((((int)blockIdx.x) * 4) + rx_outer) + ((((((int)threadIdx.y) * 11) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) & 3)))) && ((((((int)blockIdx.x) * 4) + rx_outer) + ((((((int)threadIdx.y) * 11) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) & 3)) < 29)) ? data[((((((((((rc_outer * 12544) + (((int)threadIdx.z) * 1568)) + (((((((int)threadIdx.y) * 11) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 36) * 784)) + (((int)blockIdx.y) * 196)) + ((((((((int)threadIdx.y) * 11) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 36) >> 2) * 28)) + (((int)blockIdx.x) * 4)) + rx_outer) + ((((((int)threadIdx.y) * 11) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) & 3)) - 29))] : 0.000000e+00f);
                }
              }
            }
          }
        }
      }
      for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 < 2; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) {
        if ((((((((int)threadIdx.y) * 7) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) / 48) + ((int)threadIdx.z)) < 8) {
          if (((((int)threadIdx.z) * 16) + ((((((int)threadIdx.y) * 7) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) / 3)) < 128) {
            if (((((((int)threadIdx.z) * 48) + (((int)threadIdx.y) * 7)) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 384) {
              if ((((((int)threadIdx.y) * 7) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 48) {
                if (((((int)threadIdx.x) * 2) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 7) {
                  kernel_shared[(((((((int)threadIdx.z) * 48) + (((int)threadIdx.y) * 7)) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1))] = kernel[((((((((((int)blockIdx.z) * 6912) + (((int)threadIdx.z) * 864)) + (rc_outer * 144)) + (((int)threadIdx.y) * 21)) + (((int)threadIdx.x) * 6)) + (ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 * 3)) + rx_outer))];
                }
              }
            }
          }
        }
      }
      __syncthreads();
      for (int rc_inner_outer = 0; rc_inner_outer < 4; ++rc_inner_outer) {
        for (int ax1 = 0; ax1 < 4; ++ax1) {
          for (int ax2 = 0; ax2 < 3; ++ax2) {
            pad_temp_shared_local[(((ax1 * 3) + ax2))] = pad_temp_shared[((((((rc_inner_outer * 144) + (ax1 * 36)) + (ax2 * 4)) + (((int)threadIdx.y) * 4)) + ((int)threadIdx.x)))];
          }
        }
        for (int ax11 = 0; ax11 < 4; ++ax11) {
          for (int ax21 = 0; ax21 < 3; ++ax21) {
            kernel_shared_local[(((ax11 * 3) + ax21))] = kernel_shared[(((((((int)threadIdx.z) * 48) + (rc_inner_outer * 12)) + (ax11 * 3)) + ax21))];
          }
        }
        for (int rc_inner_inner = 0; rc_inner_inner < 4; ++rc_inner_inner) {
          for (int ry_inner_inner = 0; ry_inner_inner < 3; ++ry_inner_inner) {
            compute_local[(0)] = (compute_local[(0)] + (pad_temp_shared_local[(((rc_inner_inner * 3) + ry_inner_inner))] * kernel_shared_local[(((rc_inner_inner * 3) + ry_inner_inner))]));
          }
        }
      }
    }
  }
  compute[(((((((((int)blockIdx.z) * 6272) + (((int)threadIdx.z) * 784)) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 28)) + (((int)blockIdx.x) * 4)) + ((int)threadIdx.x)))] = compute_local[(0)];
}



******6*******

Time cost of this operator: 0.000052
cnm
[src/runtime/cuda/cuda_module.cc] 
 grid=(7,4,8),  block=(4,7,8)
[src/runtime/cuda/cuda_module.cc] 
 grid=(7,4,8),  block=(4,7,8)
[src/runtime/cuda/cuda_module.cc] 
 grid=(7,4,8),  block=(4,7,8)
