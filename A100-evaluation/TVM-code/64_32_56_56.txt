ConfigSpace (len=541900800, space_map=
   0 tile_f: Split(policy=factors, product=32, num_outputs=4) len=56
   1 tile_y: Split(policy=factors, product=56, num_outputs=4) len=80
   2 tile_x: Split(policy=factors, product=56, num_outputs=4) len=80
   3 tile_rc: Split(policy=factors, product=64, num_outputs=3) len=28
   4 tile_ry: Split(policy=factors, product=3, num_outputs=3) len=3
   5 tile_rx: Split(policy=factors, product=3, num_outputs=3) len=3
   6 auto_unroll_max_step: OtherOption([0, 512, 1500]) len=3
   7 unroll_explicit: OtherOption([0, 1]) len=2
)
Finish loading 150 records

Best config:
[('tile_f', [-1, 1, 16, 1]), ('tile_y', [-1, 1, 2, 1]), ('tile_x', [-1, 1, 4, 1]), ('tile_rc', [-1, 4, 1]), ('tile_ry', [-1, 3, 1]), ('tile_rx', [-1, 1, 3]), ('auto_unroll_max_step', 0), ('unroll_explicit', 1)],None,341976786
Finish loading 150 records
/uufs/chpc.utah.edu/common/home/u0814474/soft/tvm-python/tvm/python/tvm/target/target.py:454: UserWarning: tvm.target.create() is being deprecated. Please use tvm.target.Target() instead
  warnings.warn("tvm.target.create() is being deprecated. Please use tvm.target.Target() instead")
Dump


******6*******

extern "C" __global__ void default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute) {
  float compute_local[1];
  __shared__ float pad_temp_shared[96];
  __shared__ float kernel_shared[576];
  float pad_temp_shared_local[3];
  float kernel_shared_local[3];
  compute_local[(0)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 16; ++rc_outer) {
    __syncthreads();
    if (((((((int)threadIdx.y) * 3) + ((int)threadIdx.x)) / 6) + ((int)threadIdx.z)) < 16) {
      if ((((((int)threadIdx.z) * 6) + (((int)threadIdx.y) * 3)) + ((int)threadIdx.x)) < 96) {
        if (((((int)threadIdx.y) * 3) + ((int)threadIdx.x)) < 6) {
          if (((int)threadIdx.x) < 3) {
            pad_temp_shared[((((((int)threadIdx.z) * 6) + (((int)threadIdx.y) * 3)) + ((int)threadIdx.x)))] = (((((1 <= ((((int)blockIdx.y) * 2) + (((int)threadIdx.z) & 3))) && (((((int)blockIdx.y) * 2) + (((int)threadIdx.z) & 3)) < 57)) && (1 <= (((((int)blockIdx.x) * 4) + (((int)threadIdx.y) * 3)) + ((int)threadIdx.x)))) && ((((((int)blockIdx.x) * 4) + (((int)threadIdx.y) * 3)) + ((int)threadIdx.x)) < 57)) ? data[(((((((((rc_outer * 12544) + ((((int)threadIdx.z) >> 2) * 3136)) + (((int)blockIdx.y) * 112)) + ((((int)threadIdx.z) & 3) * 56)) + (((int)blockIdx.x) * 4)) + (((int)threadIdx.y) * 3)) + ((int)threadIdx.x)) - 57))] : 0.000000e+00f);
          }
        }
      }
    }
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 5; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) {
      if (((((((int)threadIdx.y) * 2) + (((((int)threadIdx.x) * 5) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 9)) >> 2) + ((int)threadIdx.z)) < 16) {
        if ((((((int)threadIdx.z) * 4) + (((int)threadIdx.y) * 2)) + (((((int)threadIdx.x) * 5) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 9)) < 64) {
          if ((((((int)threadIdx.z) * 12) + (((int)threadIdx.y) * 6)) + (((((int)threadIdx.x) * 5) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 3)) < 192) {
            if (((((((int)threadIdx.z) * 36) + (((int)threadIdx.y) * 18)) + (((int)threadIdx.x) * 5)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 576) {
              if ((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 5)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 36) {
                if (((((int)threadIdx.x) * 5) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 18) {
                  kernel_shared[(((((((int)threadIdx.z) * 36) + (((int)threadIdx.y) * 18)) + (((int)threadIdx.x) * 5)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner))] = kernel[(((((((((int)blockIdx.z) * 9216) + (((int)threadIdx.z) * 576)) + (rc_outer * 36)) + (((int)threadIdx.y) * 18)) + (((int)threadIdx.x) * 5)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner))];
                }
              }
            }
          }
        }
      }
    }
    __syncthreads();
    for (int rc_inner_outer = 0; rc_inner_outer < 4; ++rc_inner_outer) {
      for (int rx_inner_outer = 0; rx_inner_outer < 3; ++rx_inner_outer) {
        for (int ax2 = 0; ax2 < 3; ++ax2) {
          pad_temp_shared_local[(ax2)] = pad_temp_shared[((((((rc_inner_outer * 24) + (ax2 * 6)) + (((int)threadIdx.y) * 6)) + ((int)threadIdx.x)) + rx_inner_outer))];
        }
        for (int ax21 = 0; ax21 < 3; ++ax21) {
          kernel_shared_local[(ax21)] = kernel_shared[(((((((int)threadIdx.z) * 36) + (rc_inner_outer * 9)) + (ax21 * 3)) + rx_inner_outer))];
        }
        for (int ry_inner_inner = 0; ry_inner_inner < 3; ++ry_inner_inner) {
          compute_local[(0)] = (compute_local[(0)] + (pad_temp_shared_local[(ry_inner_inner)] * kernel_shared_local[(ry_inner_inner)]));
        }
      }
    }
  }
  compute[(((((((((int)blockIdx.z) * 50176) + (((int)threadIdx.z) * 3136)) + (((int)blockIdx.y) * 112)) + (((int)threadIdx.y) * 56)) + (((int)blockIdx.x) * 4)) + ((int)threadIdx.x)))] = compute_local[(0)];
}



******6*******

Time cost of this operator: 0.000058
cnm
[src/runtime/cuda/cuda_module.cc] 
 grid=(14,28,2),  block=(4,2,16)
[src/runtime/cuda/cuda_module.cc] 
 grid=(14,28,2),  block=(4,2,16)
[src/runtime/cuda/cuda_module.cc] 
 grid=(14,28,2),  block=(4,2,16)
