ConfigSpace (len=260112384, space_map=
   0 tile_f: Split(policy=factors, product=96, num_outputs=4) len=224
   1 tile_y: Split(policy=factors, product=14, num_outputs=4) len=16
   2 tile_x: Split(policy=factors, product=14, num_outputs=4) len=16
   3 tile_rc: Split(policy=factors, product=192, num_outputs=3) len=84
   4 tile_ry: Split(policy=factors, product=3, num_outputs=3) len=3
   5 tile_rx: Split(policy=factors, product=3, num_outputs=3) len=3
   6 auto_unroll_max_step: OtherOption([0, 512, 1500]) len=3
   7 unroll_explicit: OtherOption([0, 1]) len=2
)
Finish loading 150 records

Best config:
[('tile_f', [-1, 1, 4, 4]), ('tile_y', [-1, 1, 2, 1]), ('tile_x', [-1, 1, 7, 1]), ('tile_rc', [-1, 2, 4]), ('tile_ry', [-1, 1, 1]), ('tile_rx', [-1, 3, 1]), ('auto_unroll_max_step', 1500), ('unroll_explicit', 0)],None,103127059
Finish loading 150 records
/uufs/chpc.utah.edu/common/home/u0814474/soft/tvm-python/tvm/python/tvm/target/target.py:454: UserWarning: tvm.target.create() is being deprecated. Please use tvm.target.Target() instead
  warnings.warn("tvm.target.create() is being deprecated. Please use tvm.target.Target() instead")
Dump


******6*******

extern "C" __global__ void default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute) {
  float compute_local[4];
  __shared__ float pad_temp_shared[224];
  __shared__ float kernel_shared[384];
  float pad_temp_shared_local[4];
  float kernel_shared_local[16];
  #pragma unroll
  for (int ff_c_init = 0; ff_c_init < 4; ++ff_c_init) {
    compute_local[(ff_c_init)] = 0.000000e+00f;
  }
  for (int rc_outer = 0; rc_outer < 24; ++rc_outer) {
    #pragma unroll
    for (int rx_outer = 0; rx_outer < 3; ++rx_outer) {
      __syncthreads();
      #pragma unroll
      for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 4; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) {
        pad_temp_shared[(((((((int)threadIdx.z) * 56) + (((int)threadIdx.y) * 28)) + (((int)threadIdx.x) * 4)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner))] = (((((1 <= ((((int)blockIdx.y) * 2) + (((((int)threadIdx.x) * 4) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 7))) && (((((int)blockIdx.y) * 2) + (((((int)threadIdx.x) * 4) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 7)) < 15)) && (1 <= (((((int)blockIdx.x) * 7) + rx_outer) + (((((int)threadIdx.x) * 4) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 7)))) && ((((((int)blockIdx.x) * 7) + rx_outer) + (((((int)threadIdx.x) * 4) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 7)) < 15)) ? data[((((((((((rc_outer * 1568) + (((int)threadIdx.z) * 392)) + (((int)threadIdx.y) * 196)) + (((int)blockIdx.y) * 28)) + ((((((int)threadIdx.x) * 4) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 7) * 14)) + (((int)blockIdx.x) * 7)) + rx_outer) + (((((int)threadIdx.x) * 4) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 7)) - 15))] : 0.000000e+00f);
      }
      #pragma unroll
      for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 < 7; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) {
        if ((((((int)threadIdx.z) * 4) + (((int)threadIdx.y) * 2)) + (((((int)threadIdx.x) * 7) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) / 24)) < 16) {
          if ((((((int)threadIdx.z) * 32) + (((int)threadIdx.y) * 16)) + (((((int)threadIdx.x) * 7) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) / 3)) < 128) {
            if (((((((int)threadIdx.z) * 96) + (((int)threadIdx.y) * 48)) + (((int)threadIdx.x) * 7)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 384) {
              if ((((((int)threadIdx.y) * 48) + (((int)threadIdx.x) * 7)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 96) {
                if (((((int)threadIdx.x) * 7) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 48) {
                  kernel_shared[(((((((int)threadIdx.z) * 96) + (((int)threadIdx.y) * 48)) + (((int)threadIdx.x) * 7)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1))] = kernel[((((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 6912)) + (((int)threadIdx.y) * 3456)) + ((((((int)threadIdx.x) * 7) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) / 24) * 1728)) + (rc_outer * 72)) + ((((((int)threadIdx.x) * 7) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) % 24) * 3)) + rx_outer))];
                }
              }
            }
          }
        }
      }
      __syncthreads();
      #pragma unroll
      for (int rc_inner_outer = 0; rc_inner_outer < 2; ++rc_inner_outer) {
        #pragma unroll
        for (int ry_inner_outer = 0; ry_inner_outer < 3; ++ry_inner_outer) {
          #pragma unroll
          for (int ax1 = 0; ax1 < 4; ++ax1) {
            pad_temp_shared_local[(ax1)] = pad_temp_shared[((((((rc_inner_outer * 112) + (ax1 * 28)) + (((int)threadIdx.y) * 7)) + (ry_inner_outer * 7)) + ((int)threadIdx.x)))];
          }
          #pragma unroll
          for (int ax0 = 0; ax0 < 4; ++ax0) {
            #pragma unroll
            for (int ax11 = 0; ax11 < 4; ++ax11) {
              kernel_shared_local[(((ax0 * 4) + ax11))] = kernel_shared[((((((((int)threadIdx.z) * 96) + (ax0 * 24)) + (rc_inner_outer * 12)) + (ax11 * 3)) + ry_inner_outer))];
            }
          }
          #pragma unroll
          for (int rc_inner_inner = 0; rc_inner_inner < 4; ++rc_inner_inner) {
            #pragma unroll
            for (int ff_c = 0; ff_c < 4; ++ff_c) {
              compute_local[(ff_c)] = (compute_local[(ff_c)] + (pad_temp_shared_local[(rc_inner_inner)] * kernel_shared_local[(((ff_c * 4) + rc_inner_inner))]));
            }
          }
        }
      }
    }
  }
  #pragma unroll
  for (int ff_inner_inner_inner = 0; ff_inner_inner_inner < 4; ++ff_inner_inner_inner) {
    compute[((((((((((int)blockIdx.z) * 3136) + (((int)threadIdx.z) * 784)) + (ff_inner_inner_inner * 196)) + (((int)blockIdx.y) * 28)) + (((int)threadIdx.y) * 14)) + (((int)blockIdx.x) * 7)) + ((int)threadIdx.x)))] = compute_local[(ff_inner_inner_inner)];
  }
}



******6*******

Time cost of this operator: 0.000059
cnm
[src/runtime/cuda/cuda_module.cc] 
 grid=(2,7,6),  block=(7,2,4)
[src/runtime/cuda/cuda_module.cc] 
 grid=(2,7,6),  block=(7,2,4)
[src/runtime/cuda/cuda_module.cc] 
 grid=(2,7,6),  block=(7,2,4)
