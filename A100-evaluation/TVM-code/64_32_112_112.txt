ConfigSpace (len=1659571200, space_map=
   0 tile_f: Split(policy=factors, product=32, num_outputs=4) len=56
   1 tile_y: Split(policy=factors, product=112, num_outputs=4) len=140
   2 tile_x: Split(policy=factors, product=112, num_outputs=4) len=140
   3 tile_rc: Split(policy=factors, product=64, num_outputs=3) len=28
   4 tile_ry: Split(policy=factors, product=3, num_outputs=3) len=3
   5 tile_rx: Split(policy=factors, product=3, num_outputs=3) len=3
   6 auto_unroll_max_step: OtherOption([0, 512, 1500]) len=3
   7 unroll_explicit: OtherOption([0, 1]) len=2
)
Finish loading 150 records

Best config:
[('tile_f', [-1, 1, 2, 4]), ('tile_y', [-1, 2, 2, 1]), ('tile_x', [-1, 1, 8, 2]), ('tile_rc', [-1, 2, 1]), ('tile_ry', [-1, 3, 1]), ('tile_rx', [-1, 1, 3]), ('auto_unroll_max_step', 0), ('unroll_explicit', 0)],None,216753136
Finish loading 150 records
/uufs/chpc.utah.edu/common/home/u0814474/soft/tvm-python/tvm/python/tvm/target/target.py:454: UserWarning: tvm.target.create() is being deprecated. Please use tvm.target.Target() instead
  warnings.warn("tvm.target.create() is being deprecated. Please use tvm.target.Target() instead")
Dump


******6*******

extern "C" __global__ void default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute) {
  float compute_local[16];
  __shared__ float pad_temp_shared[216];
  __shared__ float kernel_shared[144];
  float pad_temp_shared_local[12];
  float kernel_shared_local[12];
  for (int ff_c_init = 0; ff_c_init < 4; ++ff_c_init) {
    for (int xx_c_init = 0; xx_c_init < 2; ++xx_c_init) {
      compute_local[(((ff_c_init * 2) + xx_c_init))] = 0.000000e+00f;
      compute_local[((((ff_c_init * 2) + xx_c_init) + 8))] = 0.000000e+00f;
    }
  }
  for (int rc_outer = 0; rc_outer < 32; ++rc_outer) {
    __syncthreads();
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 7; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) {
      if (((((((int)threadIdx.y) * 3) + (((((int)threadIdx.x) * 7) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 18)) / 6) + ((int)threadIdx.z)) < 2) {
        if ((((((int)threadIdx.z) * 6) + (((int)threadIdx.y) * 3)) + (((((int)threadIdx.x) * 7) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 18)) < 12) {
          if (((((((int)threadIdx.z) * 108) + (((int)threadIdx.y) * 54)) + (((int)threadIdx.x) * 7)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 216) {
            if ((((((int)threadIdx.y) * 54) + (((int)threadIdx.x) * 7)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 108) {
              if (((((int)threadIdx.x) * 7) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 54) {
                pad_temp_shared[(((((((int)threadIdx.z) * 108) + (((int)threadIdx.y) * 54)) + (((int)threadIdx.x) * 7)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner))] = (((((1 <= (((((int)blockIdx.y) * 4) + (((int)threadIdx.y) * 3)) + (((((int)threadIdx.x) * 7) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 18))) && ((((((int)blockIdx.y) * 4) + (((int)threadIdx.y) * 3)) + (((((int)threadIdx.x) * 7) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 18)) < 113)) && (1 <= ((((int)blockIdx.x) * 16) + (((((int)threadIdx.x) * 7) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 18)))) && (((((int)blockIdx.x) * 16) + (((((int)threadIdx.x) * 7) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 18)) < 113)) ? data[(((((((((rc_outer * 25088) + (((int)threadIdx.z) * 12544)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.y) * 336)) + ((((((int)threadIdx.x) * 7) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 18) * 112)) + (((int)blockIdx.x) * 16)) + (((((int)threadIdx.x) * 7) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 18)) - 113))] : 0.000000e+00f);
              }
            }
          }
        }
      }
    }
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 < 5; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) {
      if ((((((int)threadIdx.z) * 4) + (((int)threadIdx.y) * 2)) + (((((int)threadIdx.x) * 5) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) / 18)) < 8) {
        if ((((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 4)) + (((((int)threadIdx.x) * 5) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) / 9)) < 16) {
          if ((((((int)threadIdx.z) * 24) + (((int)threadIdx.y) * 12)) + (((((int)threadIdx.x) * 5) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) / 3)) < 48) {
            if (((((((int)threadIdx.z) * 72) + (((int)threadIdx.y) * 36)) + (((int)threadIdx.x) * 5)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 144) {
              if ((((((int)threadIdx.y) * 36) + (((int)threadIdx.x) * 5)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 72) {
                if (((((int)threadIdx.x) * 5) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 36) {
                  kernel_shared[(((((((int)threadIdx.z) * 72) + (((int)threadIdx.y) * 36)) + (((int)threadIdx.x) * 5)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1))] = kernel[(((((((((int)blockIdx.z) * 4608) + (((int)threadIdx.z) * 2304)) + (((int)threadIdx.y) * 1152)) + ((((((int)threadIdx.x) * 5) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) / 18) * 576)) + (rc_outer * 18)) + (((((int)threadIdx.x) * 5) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) % 18)))];
                }
              }
            }
          }
        }
      }
    }
    __syncthreads();
    for (int rc_inner_outer = 0; rc_inner_outer < 2; ++rc_inner_outer) {
      for (int rx_inner_outer = 0; rx_inner_outer < 3; ++rx_inner_outer) {
        for (int ax2 = 0; ax2 < 3; ++ax2) {
          for (int ax3 = 0; ax3 < 2; ++ax3) {
            pad_temp_shared_local[(((ax2 * 2) + ax3))] = pad_temp_shared[(((((((rc_inner_outer * 108) + (ax2 * 18)) + (((int)threadIdx.y) * 18)) + (((int)threadIdx.x) * 2)) + ax3) + rx_inner_outer))];
            pad_temp_shared_local[((((ax2 * 2) + ax3) + 6))] = pad_temp_shared[((((((((rc_inner_outer * 108) + (ax2 * 18)) + (((int)threadIdx.y) * 18)) + (((int)threadIdx.x) * 2)) + ax3) + rx_inner_outer) + 36))];
          }
        }
        for (int ax0 = 0; ax0 < 4; ++ax0) {
          for (int ax21 = 0; ax21 < 3; ++ax21) {
            kernel_shared_local[(((ax0 * 3) + ax21))] = kernel_shared[((((((((int)threadIdx.z) * 72) + (ax0 * 18)) + (rc_inner_outer * 9)) + (ax21 * 3)) + rx_inner_outer))];
          }
        }
        for (int ry_inner_inner = 0; ry_inner_inner < 3; ++ry_inner_inner) {
          for (int ff_c = 0; ff_c < 4; ++ff_c) {
            for (int xx_c = 0; xx_c < 2; ++xx_c) {
              compute_local[(((ff_c * 2) + xx_c))] = (compute_local[(((ff_c * 2) + xx_c))] + (pad_temp_shared_local[(((ry_inner_inner * 2) + xx_c))] * kernel_shared_local[(((ff_c * 3) + ry_inner_inner))]));
              compute_local[((((ff_c * 2) + xx_c) + 8))] = (compute_local[((((ff_c * 2) + xx_c) + 8))] + (pad_temp_shared_local[((((ry_inner_inner * 2) + xx_c) + 6))] * kernel_shared_local[(((ff_c * 3) + ry_inner_inner))]));
            }
          }
        }
      }
    }
  }
  for (int ff_inner_inner_inner = 0; ff_inner_inner_inner < 4; ++ff_inner_inner_inner) {
    for (int xx_inner_inner_inner = 0; xx_inner_inner_inner < 2; ++xx_inner_inner_inner) {
      compute[(((((((((((int)blockIdx.z) * 100352) + (((int)threadIdx.z) * 50176)) + (ff_inner_inner_inner * 12544)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.y) * 112)) + (((int)blockIdx.x) * 16)) + (((int)threadIdx.x) * 2)) + xx_inner_inner_inner))] = compute_local[(((ff_inner_inner_inner * 2) + xx_inner_inner_inner))];
      compute[((((((((((((int)blockIdx.z) * 100352) + (((int)threadIdx.z) * 50176)) + (ff_inner_inner_inner * 12544)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.y) * 112)) + (((int)blockIdx.x) * 16)) + (((int)threadIdx.x) * 2)) + xx_inner_inner_inner) + 224))] = compute_local[((((ff_inner_inner_inner * 2) + xx_inner_inner_inner) + 8))];
    }
  }
}



******6*******

Time cost of this operator: 0.000104
cnm
[src/runtime/cuda/cuda_module.cc] 
 grid=(7,28,4),  block=(8,2,2)
[src/runtime/cuda/cuda_module.cc] 
 grid=(7,28,4),  block=(8,2,2)
[src/runtime/cuda/cuda_module.cc] 
 grid=(7,28,4),  block=(8,2,2)
