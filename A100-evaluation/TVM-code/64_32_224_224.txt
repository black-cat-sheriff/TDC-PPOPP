ConfigSpace (len=4248502272, space_map=
   0 tile_f: Split(policy=factors, product=32, num_outputs=4) len=56
   1 tile_y: Split(policy=factors, product=224, num_outputs=4) len=224
   2 tile_x: Split(policy=factors, product=224, num_outputs=4) len=224
   3 tile_rc: Split(policy=factors, product=64, num_outputs=3) len=28
   4 tile_ry: Split(policy=factors, product=3, num_outputs=3) len=3
   5 tile_rx: Split(policy=factors, product=3, num_outputs=3) len=3
   6 auto_unroll_max_step: OtherOption([0, 512, 1500]) len=3
   7 unroll_explicit: OtherOption([0, 1]) len=2
)
Finish loading 150 records

Best config:
[('tile_f', [-1, 1, 2, 1]), ('tile_y', [-1, 1, 14, 1]), ('tile_x', [-1, 1, 7, 4]), ('tile_rc', [-1, 4, 1]), ('tile_ry', [-1, 1, 3]), ('tile_rx', [-1, 3, 1]), ('auto_unroll_max_step', 512), ('unroll_explicit', 0)],None,1108666166
Finish loading 150 records
/uufs/chpc.utah.edu/common/home/u0814474/soft/tvm-python/tvm/python/tvm/target/target.py:454: UserWarning: tvm.target.create() is being deprecated. Please use tvm.target.Target() instead
  warnings.warn("tvm.target.create() is being deprecated. Please use tvm.target.Target() instead")
Dump


******6*******

extern "C" __global__ void default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute) {
  float compute_local[4];
  __shared__ float pad_temp_shared[1920];
  __shared__ float kernel_shared[72];
  float pad_temp_shared_local[6];
  float kernel_shared_local[3];
  #pragma unroll
  for (int xx_c_init = 0; xx_c_init < 4; ++xx_c_init) {
    compute_local[(xx_c_init)] = 0.000000e+00f;
  }
  for (int rc_outer = 0; rc_outer < 16; ++rc_outer) {
    __syncthreads();
    #pragma unroll
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 10; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) {
      if (((((int)threadIdx.z) * 2) + ((((((int)threadIdx.y) * 69) + (((int)threadIdx.x) * 10)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 480)) < 4) {
        if (((((int)threadIdx.z) * 32) + ((((((int)threadIdx.y) * 69) + (((int)threadIdx.x) * 10)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 30)) < 64) {
          if (((((((int)threadIdx.z) * 960) + (((int)threadIdx.y) * 69)) + (((int)threadIdx.x) * 10)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 1920) {
            if ((((((int)threadIdx.y) * 69) + (((int)threadIdx.x) * 10)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 960) {
              if (((((int)threadIdx.x) * 10) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 69) {
                pad_temp_shared[(((((((int)threadIdx.z) * 960) + (((int)threadIdx.y) * 69)) + (((int)threadIdx.x) * 10)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner))] = (((((1 <= ((((int)blockIdx.y) * 14) + (((((((int)threadIdx.y) * 69) + (((int)threadIdx.x) * 10)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 480) / 30))) && (((((int)blockIdx.y) * 14) + (((((((int)threadIdx.y) * 69) + (((int)threadIdx.x) * 10)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 480) / 30)) < 225)) && (1 <= ((((int)blockIdx.x) * 28) + ((((((int)threadIdx.y) * 69) + (((int)threadIdx.x) * 10)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 30)))) && (((((int)blockIdx.x) * 28) + ((((((int)threadIdx.y) * 69) + (((int)threadIdx.x) * 10)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 30)) < 225)) ? data[(((((((((rc_outer * 200704) + (((int)threadIdx.z) * 100352)) + (((((((int)threadIdx.y) * 69) + (((int)threadIdx.x) * 10)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 480) * 50176)) + (((int)blockIdx.y) * 3136)) + ((((((((int)threadIdx.y) * 69) + (((int)threadIdx.x) * 10)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 480) / 30) * 224)) + (((int)blockIdx.x) * 28)) + ((((((int)threadIdx.y) * 69) + (((int)threadIdx.x) * 10)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 30)) - 225))] : 0.000000e+00f);
              }
            }
          }
        }
      }
    }
    if (((((((int)threadIdx.x) / 3) + ((int)threadIdx.y)) / 12) + ((int)threadIdx.z)) < 2) {
      if (((((int)threadIdx.z) * 4) + (((((int)threadIdx.x) / 3) + ((int)threadIdx.y)) / 3)) < 8) {
        if ((((((int)threadIdx.z) * 12) + (((int)threadIdx.x) / 3)) + ((int)threadIdx.y)) < 24) {
          if ((((((int)threadIdx.z) * 36) + (((int)threadIdx.y) * 3)) + ((int)threadIdx.x)) < 72) {
            if (((((int)threadIdx.y) * 3) + ((int)threadIdx.x)) < 36) {
              if (((int)threadIdx.x) < 3) {
                kernel_shared[((((((int)threadIdx.z) * 36) + (((int)threadIdx.y) * 3)) + ((int)threadIdx.x)))] = kernel[(((((((((int)blockIdx.z) * 1152) + ((((int)threadIdx.y) / 12) * 576)) + (((int)threadIdx.z) * 576)) + (rc_outer * 36)) + ((((int)threadIdx.y) % 12) * 3)) + ((int)threadIdx.x)))];
              }
            }
          }
        }
      }
    }
    __syncthreads();
    #pragma unroll
    for (int rc_inner_outer = 0; rc_inner_outer < 4; ++rc_inner_outer) {
      #pragma unroll
      for (int ry_inner_outer = 0; ry_inner_outer < 3; ++ry_inner_outer) {
        #pragma unroll
        for (int ax3 = 0; ax3 < 6; ++ax3) {
          pad_temp_shared_local[(ax3)] = pad_temp_shared[((((((rc_inner_outer * 480) + (((int)threadIdx.y) * 30)) + (ry_inner_outer * 30)) + (((int)threadIdx.x) * 4)) + ax3))];
        }
        #pragma unroll
        for (int ax31 = 0; ax31 < 3; ++ax31) {
          kernel_shared_local[(ax31)] = kernel_shared[(((((((int)threadIdx.z) * 36) + (rc_inner_outer * 9)) + (ry_inner_outer * 3)) + ax31))];
        }
        #pragma unroll
        for (int rx_inner_inner = 0; rx_inner_inner < 3; ++rx_inner_inner) {
          #pragma unroll
          for (int xx_c = 0; xx_c < 4; ++xx_c) {
            compute_local[(xx_c)] = (compute_local[(xx_c)] + (pad_temp_shared_local[((xx_c + rx_inner_inner))] * kernel_shared_local[(rx_inner_inner)]));
          }
        }
      }
    }
  }
  #pragma unroll
  for (int xx_inner_inner_inner = 0; xx_inner_inner_inner < 4; ++xx_inner_inner_inner) {
    compute[((((((((((int)blockIdx.z) * 100352) + (((int)threadIdx.z) * 50176)) + (((int)blockIdx.y) * 3136)) + (((int)threadIdx.y) * 224)) + (((int)blockIdx.x) * 28)) + (((int)threadIdx.x) * 4)) + xx_inner_inner_inner))] = compute_local[(xx_inner_inner_inner)];
  }
}



******6*******

Time cost of this operator: 0.000474
cnm
[src/runtime/cuda/cuda_module.cc] 
 grid=(8,16,16),  block=(7,14,2)
[src/runtime/cuda/cuda_module.cc] 
 grid=(8,16,16),  block=(7,14,2)
[src/runtime/cuda/cuda_module.cc] 
 grid=(8,16,16),  block=(7,14,2)
